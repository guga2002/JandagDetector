// <auto-generated />
using ManageLIbrary.Dbcontexti;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManageLIbrary.Migrations
{
    [DbContext(typeof(GlobalDbContext))]
    [Migration("20240222101305_mnew")]
    partial class mnew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.1.24081.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("db.Models.Chanell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameOfChanell");

                    b.HasKey("Id");

                    b.ToTable("Chanells");
                });

            modelBuilder.Entity("db.Models.ChanellSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChanellId")
                        .HasColumnType("int");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FormatOfSource");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Source Name");

                    b.Property<string>("SourceStream")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SourceStrean");

                    b.HasKey("Id");

                    b.HasIndex("ChanellId");

                    b.ToTable("ChanellSources");
                });

            modelBuilder.Entity("db.Models.Desclamber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Card")
                        .HasColumnType("int")
                        .HasColumnName("Card");

                    b.Property<int>("ChanellSourceID")
                        .HasColumnType("int");

                    b.Property<int>("Emr")
                        .HasColumnType("int")
                        .HasColumnName("Emr");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("Port");

                    b.HasKey("Id");

                    b.HasIndex("ChanellSourceID")
                        .IsUnique();

                    b.ToTable("Desclambers");
                });

            modelBuilder.Entity("db.Models.Packages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChanellID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameOfPackage");

                    b.HasKey("Id");

                    b.HasIndex("ChanellID");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("db.Models.Reciever", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Card")
                        .HasColumnType("int")
                        .HasColumnName("Card");

                    b.Property<int>("ChanellSourceID")
                        .HasColumnType("int");

                    b.Property<int>("Emr")
                        .HasColumnType("int")
                        .HasColumnName("Emr");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("Port");

                    b.HasKey("Id");

                    b.HasIndex("ChanellSourceID")
                        .IsUnique();

                    b.ToTable("Reciever");
                });

            modelBuilder.Entity("db.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChanellSourceID")
                        .HasColumnType("int");

                    b.Property<int>("Isactive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("ChanellSourceID")
                        .IsUnique();

                    b.ToTable("Statuss");
                });

            modelBuilder.Entity("db.Models.Transcoder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Card")
                        .HasColumnType("int")
                        .HasColumnName("Card");

                    b.Property<int>("ChanellSourceID")
                        .HasColumnType("int");

                    b.Property<int>("Emr")
                        .HasColumnType("int")
                        .HasColumnName("Emr");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("Port");

                    b.HasKey("Id");

                    b.HasIndex("ChanellSourceID")
                        .IsUnique();

                    b.ToTable("Transcoders");
                });

            modelBuilder.Entity("db.Models.ChanellSource", b =>
                {
                    b.HasOne("db.Models.Chanell", "chanell")
                        .WithMany("Sources")
                        .HasForeignKey("ChanellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chanell");
                });

            modelBuilder.Entity("db.Models.Desclamber", b =>
                {
                    b.HasOne("db.Models.ChanellSource", "Source")
                        .WithOne("Desclamber")
                        .HasForeignKey("db.Models.Desclamber", "ChanellSourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("db.Models.Packages", b =>
                {
                    b.HasOne("db.Models.Chanell", "Chanell")
                        .WithMany("Packages")
                        .HasForeignKey("ChanellID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chanell");
                });

            modelBuilder.Entity("db.Models.Reciever", b =>
                {
                    b.HasOne("db.Models.ChanellSource", "Source")
                        .WithOne("Reciever")
                        .HasForeignKey("db.Models.Reciever", "ChanellSourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("db.Models.Status", b =>
                {
                    b.HasOne("db.Models.ChanellSource", "Source")
                        .WithOne("Status")
                        .HasForeignKey("db.Models.Status", "ChanellSourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("db.Models.Transcoder", b =>
                {
                    b.HasOne("db.Models.ChanellSource", "Source")
                        .WithOne("Transcoder")
                        .HasForeignKey("db.Models.Transcoder", "ChanellSourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("db.Models.Chanell", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("db.Models.ChanellSource", b =>
                {
                    b.Navigation("Desclamber")
                        .IsRequired();

                    b.Navigation("Reciever")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("Transcoder")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
